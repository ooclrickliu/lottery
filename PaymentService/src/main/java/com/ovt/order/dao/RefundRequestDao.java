/**
 * RefundRequestDao.java
 * 
 * Copyright@2015 OVT Inc. All rights reserved. 
 * 
 * 2015年12月21日
 */
package com.ovt.order.dao;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.ovt.order.dao.constant.OrderState;
import com.ovt.order.dao.vo.PageInfo;
import com.ovt.order.dao.vo.RefundRequest;

/**
 * RefundRequestDao
 * 
 * @Author brad.zhou
 * @Version 1.0
 * @See
 * @Since [OVT Cloud Platform]/[API] 1.0
 */
public interface RefundRequestDao
{
    /**
     * Add a new refund request.
     * 
     * @param refundRequest
     * @return String
     */
    public RefundRequest saveRefundRequest(RefundRequest refundRequest);

    /**
     * RefundRequestList that is not processed is queried by auditor.
     * 
     * @param pageInfo
     * 
     * @return List<RefundRequest>
     */
    public List<RefundRequest> queryNonProcessRefundRequestList(
            PageInfo pageInfo);

    /**
     * RefundRequestList that is processed is queried by auditor.
     * 
     * @param pageInfo
     * 
     * @return List<RefundRequest>
     */
    public List<RefundRequest> queryProcessedRefundRequestList(PageInfo pageInfo);

    /**
     * RefundRequestList is queried by auditor.
     * 
     * @return List<RefundRequest>
     */
    public List<RefundRequest> queryAllRefundRequestList();

    /**
     * Query refundRequest list.
     * 
     * @param requestId
     * @return RefundRequest
     */
    public List<RefundRequest> queryRefundRequestList(List<Long> requestIdList);

    /**
     * Get RefundRequest list that has Applied by orderNo.
     * 
     * @param orderNo
     * @return List<RefundRequest>
     */
    public List<RefundRequest> queryAppliedRefundRequestList(String orderNo);

    /**
     * Update refundRequestList's state.
     * 
     * @param requestId
     * @param state
     * @return OrderState
     */
    public OrderState updateRefundRequestListState(
            Collection<Long> requestListId, OrderState state);

    /**
     * Update refundRequest state.
     * 
     * @param userId
     * @param state
     * @return
     */
    public void updateRefundRequestState(String userId, OrderState state);

    /**
     * Update refundRequestList by requestId list, state and auditorId.
     * 
     * @param requestListId
     * @param state
     * @param auditorId
     * @param batchNo
     * @return OrderState
     */
    public OrderState updateRefundRequestList(List<Long> requestListId,
            OrderState state, long auditorId, String batchNo);

    /**
     * Update refundRequestList by requestId list, state, feedback and
     * auditorId.
     * 
     * @param requestListId
     * @param state
     * @param auditorId
     * @param feedback
     * @return OrderState
     */
    public OrderState updateRefundRequestListFeedback(List<Long> requestListId,
            OrderState state, long auditorId, String feedback);

    /**
     * Update refundRequestList by requestId list, state.
     * 
     * @param requestListId
     * @param state
     * @param auditorId
     * @param feedback
     * @return
     */
    public void updateRefundRequestList(List<Long> requestListId,
            OrderState state);

    /**
     * Get RefundRequest list by orderNo.
     * 
     * @param orderNo
     * @return List<RefundRequest>
     */
    public List<RefundRequest> queryRefundRequest(String orderNo);

    /**
     * Get RefundRequest list by orderNo.
     * 
     * @param orderNo
     * @return List<RefundRequest>
     */
    public OrderState queryRefundRequestState(String orderNo);

    /**
     * Get RefundRequest list that is applying by orderNo.
     * 
     * @param orderNo
     * @return List<RefundRequest>
     */
    public List<RefundRequest> queryRefundingRequest(String orderNo);

    /**
     * update state in refundRequest records by orderNos.
     * 
     * @param orderNos
     * @param state
     */
    public void updateRefundRequestState(List<String> orderNos, OrderState state);

    /**
     * Update Order's refundedFee list that generated by RefundRequest list
     * which id is in idlList.
     * 
     * @param entry
     */
    public void updateOrderRefundedFee(Map<Long, Float> entry);

    /**
     * Judge whether the order is being applied for refund by orderNo.
     * 
     * @param orderNo
     * @return boolean
     */
    public boolean isRefunding(String orderNo);

    /**
     * @param refundRequetIdDescMap
     */
    public void updateRefundRequestListFailResult(
            Map<Long, String> refundRequetIdDescMap);

    /**
     * @param batchNo
     * @param auditorId
     */
    public void updateAuditorId(String batchNo, long auditorId);

    /**
     * 
     * @param refundRequest
     */
    public void updateRefundRequest(RefundRequest refundRequest);

    /**
     * 
     * @param pageInfo
     * @param requestState
     * @return
     */
    public List<RefundRequest> queryRefundRequestList(PageInfo pageInfo,
            String requestState);

    /**
     * 
     * @param orderNo
     * @return
     */
    public RefundRequest queryRefundDoneRequestByOrderNo(String orderNo);

    public List<RefundRequest> queryRefundRequestList(PageInfo pageInfo,
            String orderNo, String requestState, String startTime,
            String endTime);

}
